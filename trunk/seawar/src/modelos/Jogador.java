package modelos;

import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;

import dao.JogadorDAO;
import dao.RankingDAO;
import exceptions.TabuleiroIOException;


//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : @Seawar
//  @ File Name : Jogador.java
//  @ Date : @06/05/2011
//  @ Author : @Fernando
//	@ Reviewer: @Vitor
//




public class Jogador extends Usuario implements Cloneable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	public String sIpJogador;
	public boolean bIsBot;
	public boolean bPronto;
	public Tabuleiro oTabuleiroAtaque;
	public Tabuleiro oTabuleiroDefesa;
	public Conexao conexaoJogador;
	private int jogoId; //Variavel para saber qual o id do jogo q ele está jogando
	boolean online = false;
	boolean myTurn = false;
	
	//Método utilizado apenas para criar oponentes DUMMIES
	//Esse tipo de oponente deve ser criado apenas no CLIENTE
	public Jogador(){
		conexaoJogador = new Conexao(this);
	}
	
	public Jogador(Socket clientSocket) {
		//Cria um jogador com um socket especifico
		sIpJogador = (clientSocket.getInetAddress() != null) ? clientSocket.getInetAddress().getHostAddress() : "0.0.0.0" ;
		//Cria uma conexão utilizando o mesmo socket do jogador
		conexaoJogador = new Conexao(this, clientSocket);
	}

	public String getIpJogador() {
		return sIpJogador;
	}
	
	public void setIpJogador(String ipJogador) {
		sIpJogador = ipJogador;
	}
	public boolean isMinhaVez(){
		return myTurn;
	}
	public void setMinhaVez(boolean isSuaVez){
		myTurn = isSuaVez;
	}
	public boolean isBot() {
		return bIsBot;
	}
	
	public void setIsBot(boolean value) {
		bIsBot = value;
	}
	
	public boolean isPronto() {
		return bPronto;
	}

	public void setPronto(boolean bPronto) {
		this.bPronto = bPronto;
	}

	public Tabuleiro getTabuleiroAtaque() {
		return oTabuleiroAtaque;
	}
	
	public void setTabuleiroAtaque(Tabuleiro tabuleiro) {
		oTabuleiroAtaque = tabuleiro;
	}
	
	public Tabuleiro getTabuleiroDefesa() {
		return oTabuleiroDefesa;
	}
	
	public void setTabuleiroDefesa(Tabuleiro tabuleiro) {
		oTabuleiroDefesa = tabuleiro;
	}
	
	public boolean isOnline() {
		
		//return getConexao().socket != null && getConexao().socket.isConnected();
		return online;//JogadorDAO.IsOnline(this.iId_usuario);
	}
	public static boolean isOnline(int id_usuario) {
		
		return JogadorDAO.IsOnline(id_usuario);
		
	}
	public boolean setOffline() {
		//Ativa o bot
		//setIsBot(true);
		//setIpJogador("localhost");
		online = false;//TODO: Descomentar: JogadorDAO.RemoverJogador(this);
		if(this.getConexao().socket != null && !this.getConexao().socket.isClosed()){
			try {
				this.getConexao().socket.close();
			} catch (IOException e) {
				//Socket já fechado
			}
		}
		boolean removido = true ;
		return removido;
	}
	
	public boolean setOnline() {
		
		boolean inserido = true;//TODO: Descomentar: JogadorDAO.InserirJogador(this);
		online = true;
		return inserido;
	}
	
	public boolean isJogando() {
		boolean jogando = (this.getJogoId() > 0);
		
		//jogando = JogadorDAO.IsJogando(this.iId_usuario);
		
		return jogando;
	}
	public int getJogoId(){
		return jogoId;
	}
	public void setJogoId(int id){
		jogoId = id;
	}
	
	public Conexao getConexao(){
		return this.conexaoJogador;
	}
	
	public void Atacar(int idJogo, int x, int y){
		//Tabuleiro tabuleiroAtaque = getTabuleiroAtaque();		
		//Celula cel = tabuleiroAtaque.encontrarCelula(x, y);
		
		//Como a célula não é processada aqui, pode-se jogar uma célula DUMMIE com apenas o X e o Y do local atacado
		Celula cel = new Celula(x,y);
		this.conexaoJogador.enviarAtaque(idJogo,cel);
	}

	public boolean desconectar() {
		return this.conexaoJogador.desconectarJogador();		
	}

	public void conectar() {
		this.conexaoJogador.conectarJogador();
		
	}

	public boolean enviarTabuleiroDefesa(int idJogo) {
		try {
			this.conexaoJogador.enviarTabuleiro(idJogo, oTabuleiroDefesa);
			return true;
		} catch (TabuleiroIOException e) {
			Log.gravarLog(e.getMessage());
			e.printStackTrace();
		}
		return false;
	}

	public boolean enviarRespostaConvite(int jogoid, String nomeJogador, String resposta) {
		try{
			this.conexaoJogador.enviarRespostaConvite(jogoid, nomeJogador,resposta);
			return true;
		}catch (Exception e) {
			
		}
		
		return false;
	}

	public boolean conectarEmJogo(int jogoid) {
		try	{
			this.conexaoJogador.conectarEmJogo(jogoid);
			return true;
		}
		catch(Exception e){
			
		}
		return false;
	}

	public boolean criarNovoJogo() {
		try{
			this.conexaoJogador.criarNovoJogo();
		}
		catch(Exception e){
			
		}
		return false;
	}

	public void solicitarListaJogadores() {
		try{
			this.conexaoJogador.solicitarListaJogadores();
		}
		catch(Exception e){
			
		}
	}

	public void solicitarListaJogos() {
		try{
			this.conexaoJogador.solicitarListaJogos();
		}
		catch(Exception e){
			
		}
	}

	@Override
	public Jogador clone() throws CloneNotSupportedException {
		return (Jogador)super.clone();
	}

	public void gravarPontuacao(Jogador adversario) {
		if(this.bIsBot)
			return;
			//Atualiza a pontuação do cara se nao for BOT (200 pontos por perder?)
			int pontos = 0;
			//Verifica quantos barcos ele afundou no campo do adversário
			for(Embarcacao barco : adversario.getTabuleiroDefesa().getArrEmbarcacoes()){
				if(barco != null){
					if(barco.getNaufragado()){
						//pontua pelo valor do barco
						pontos += barco.getValorEmbarcacao();
					}else {
						for(Celula celulaBarco : barco.getListaCelulas()){							
							//Pontua de acordo com as células que ele acertou
							pontos += (celulaBarco.getTipoCelula() == TipoCelula.Embarcacao && celulaBarco.isAtirada()) ? barco.getValorEmbarcacao()/barco.getTamanho() : 0;
						}
					}
				}
			}
			int novaPontuacao = this.getPontuacao() + pontos;
			this.setPontuacao(novaPontuacao);
			dao.UsuarioDAO.atualizarPontuacao(this);
			
	}

	public void carregarDadosUsuario(Usuario objUsuarioReferencia) {
		// TODO Auto-generated method stub
		
	}
}
