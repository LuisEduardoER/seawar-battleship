package modelos;

import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Formatter;
import java.util.StringTokenizer;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import exceptions.TabuleiroIOException;

import utils.Parser;

import Comunicacao.Constantes;
import Comunicacao.DicionarioMensagem;
import Comunicacao.IMessageListener;
import Comunicacao.MessageSender;
import Comunicacao.TipoMensagem;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : @Seawar
//  @ File Name : Conexao.java
//  @ Date : @06/05/2011
//  @ Author : @Fernando
//
//




public class Conexao {
	private String sIp_servidor;
	private int porta_servidor;
	
	ExecutorService executor;
	Socket socket;
	Formatter output;
	Jogador player;
	
	
	public Conexao(Jogador jogador){
		player = jogador;
	}
	public Conexao(Jogador jogador, Socket clientSocket) {
		socket = clientSocket;
		player = jogador;
		executor = Executors.newCachedThreadPool();
	}
	public Socket getSocket(){
		return this.socket;
	}
	public void conectarJogador() {
		if(player.isOnline())
			return;
		String mensagem = DicionarioMensagem.GerarMensagemPorTipo(TipoMensagem.ConectarServidor);
		String mensagemEnviar = String.format(mensagem, this.player.getLogin(), this.player.getSenha());
		MessageSender send = new MessageSender(this.socket, mensagemEnviar);
		send.run();
	}
	
	public boolean desconectarJogador() {
		if(!player.isOnline())
			return false;
		String mensagem = DicionarioMensagem.GerarMensagemPorTipo(TipoMensagem.DesconectarServidor);
		Runnable send = new MessageSender(this.socket, mensagem);
		try {
			//Aguarda o envio da mensagem para continuar a execução
			Future futuro = executor.submit(send);
			futuro.get();
			
			//Fecha o socket que envia informação
			this.socket.close();
			return true;
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return false;
	}
	
	public void enviarAtaque(int jogoId, Celula celulaAtacada) {
		if(!player.isOnline())
			return;
		
		String mensagem = DicionarioMensagem.GerarMensagemPorTipo(TipoMensagem.AtacarOponente);
		mensagem = String.format(mensagem, jogoId, celulaAtacada.x, celulaAtacada.y);
		MessageSender send = new MessageSender(this.socket, mensagem);
		executor.execute(send);
	}
	
	public void enviarTabuleiro(int idJogo, Tabuleiro tabuleiro) throws TabuleiroIOException{
		if(!player.isOnline()){
			return;
		}
		String mensagem = DicionarioMensagem.GerarMensagemPorTipo(TipoMensagem.BarcosPosicionados);
		String tabuleiroSerializado;
		try {
			tabuleiroSerializado = Parser.ObjetoParaString(tabuleiro);
		} catch (IOException e) {
			tabuleiroSerializado = "";
			e.printStackTrace();
			throw new TabuleiroIOException(e.getMessage());
		}
		System.out.println("Enviando tabuleiro defesa");
		String mensagemEnviar = String.format(mensagem, idJogo, tabuleiroSerializado, "OK");
		MessageSender send = new MessageSender(this.socket, mensagemEnviar);
		executor.execute(send);
	}
	
	public void enviarRespostaConvite(int jogoid, String nomeJogador, String resposta) throws Exception {
		verificarJogadorOnline();
		String mensagem = DicionarioMensagem.GerarMensagemPorTipo(TipoMensagem.RespostaChamada);
		mensagem = String.format(mensagem, jogoid, nomeJogador, resposta);
		MessageSender send = new MessageSender(this.socket, mensagem);
		executor.execute(send);
	}
	public void conectarEmJogo(int jogoid) throws Exception {
		verificarJogadorOnline();
		//Envia a mensagem para o servidor com a intenção de entrar no jogo escolhido
		String mensagem = DicionarioMensagem.GerarMensagemPorTipo(TipoMensagem.EntrarJogo);
		mensagem = String.format(mensagem, jogoid, this.player.getLogin(), 1);
		MessageSender send = new MessageSender(this.socket, mensagem);
		executor.execute(send);
		
	}
	public void criarNovoJogo() throws Exception {
		verificarJogadorOnline();
		//Envia a mensagem para o servidor com a intenção de criar um novo jogo
		String mensagem = DicionarioMensagem.GerarMensagemPorTipo(TipoMensagem.CriarJogo);
		//formata a mensagem informando  jogoID e o nome do criador
		mensagem = String.format(mensagem, 0, this.player.getLogin());
		MessageSender send = new MessageSender(this.socket, mensagem);
		executor.execute(send);
	}
	private void verificarJogadorOnline() throws Exception {
		if(!player.isOnline()){
			throw new Exception("Jogador offline!");
		}
	}
	public void solicitarListaJogadores() throws Exception {
		verificarJogadorOnline();	
		//Envia a mensagem para o servidor solicitando a lista de jogadores online
		String mensagem = DicionarioMensagem.GerarMensagemPorTipo(TipoMensagem.EnviarListaJogadores);
		mensagem = String.format(mensagem, "");
		MessageSender send = new MessageSender(this.socket, mensagem);
		executor.execute(send);
	}
	public void solicitarListaJogos() throws Exception {
		verificarJogadorOnline();
		//Envia a mensagem para o servidor solicitando a lista de jogos abertos
		String mensagem = DicionarioMensagem.GerarMensagemPorTipo(TipoMensagem.EnviarListaJogos);
		mensagem = String.format(mensagem, "");
		MessageSender send = new MessageSender(this.socket, mensagem);
		executor.execute(send);
	}
	public void chamarJogador(String nomeJogador, int jogoId) throws Exception {
		verificarJogadorOnline();
		
		//Envia mensagem para o servidor alertar outro jogador sobre o convite
		String mensagem = DicionarioMensagem.GerarMensagemPorTipo(TipoMensagem.ChamarJogador);
		mensagem = String.format(mensagem, jogoId, nomeJogador);
		MessageSender send = new MessageSender(this.socket, mensagem);
		executor.execute(send);
	}
	public void desistirJogo(int idJogo) throws Exception {
		verificarJogadorOnline();
		
		//Envia mensagem para o servidor alertar outro jogador sobre o convite
		String mensagem = DicionarioMensagem.GerarMensagemPorTipo(TipoMensagem.SairDeJogo);
		mensagem = String.format(mensagem, idJogo);
		MessageSender send = new MessageSender(this.socket, mensagem);
		executor.execute(send);
	}
}
